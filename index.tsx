import React, { useMemo, useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { AlertTriangle, Activity, Stethoscope, Search, ShieldAlert, CircleHelp } from "lucide-react";
import { motion } from "framer-motion";

// ---------------- SAFETY FIRST ----------------
// ржПржЗ ржбрзЗржорзЛржЯрж┐ ржХрзЗржмрж▓ рж╢рж┐ржХрзНрж╖рж╛/рждржерзНржпржЧржд ржЙржжрзНржжрзЗрж╢рзНржпрзЗред
// ржПржЯрж┐ ржХрзЛржиржУ рж░рзЛржЧржирж┐рж░рзНржгржпрж╝ ржмрж╛ ржЪрж┐ржХрж┐рзОрж╕рж╛рж░ ржмрж┐ржХрж▓рзНржк ржиржпрж╝ред ржбрзЛржЬ/ржФрж╖ржз рж╢рзБрж░рзБ ржХрж░рж╛рж░ ржЖржЧрзЗ рж▓рж╛ржЗрж╕рзЗржирзНрж╕ржкрзНрж░рж╛ржкрзНржд ржЖржпрж╝рзБрж░рзНржмрзЗржжрж┐ржХ ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ (BAMS) ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред

const RED_FLAGS: { pattern: RegExp; message: string }[] = [
  { pattern: /(ржмрзБржХрзЗрж░ ржмрзНржпржерж╛|ржЪрзЗрж╕рзНржЯ ржкрзЗржЗржи|ржЪрж╛ржк|рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ|рж╢рзНржмрж╛рж╕ ржирж┐рждрзЗ ржЕрж╕рзБржмрж┐ржзрж╛)/i, message: "ржмрзБржХрзЗрж░ ржмрзНржпржерж╛ ржмрж╛ рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ тАФ рждрж╛рзОржХрзНрж╖ржгрж┐ржХ ржЬрж░рзБрж░рж┐ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржирж┐ржи (112/108)ред" },
  { pattern: /(ржЕржЪрзЗрждржи|ржмрзЗрж╣рзБржБрж╢|ржмрж┐ржнрзНрж░рж╛ржирзНрждрж┐|рж╣рзНржпрж╛рж▓рзБрж╕рж┐ржирзЗрж╢ржи)/i, message: "ржЕржЪрзЗрждржирждрж╛/ржмрж┐ржнрзНрж░рж╛ржирзНрждрж┐ тАФ ржЬрж░рзБрж░рж┐ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржжрж░ржХрж╛рж░ред" },
  { pattern: /(рж░ржХрзНрждржкрж╛ржд|ржмрзНрж▓рж┐ржбрж┐ржВ|рж░ржХрзНржд ржЙржаржЫрзЗ|рж░ржХрзНрждржорж┐рж╢рзНрж░рж┐ржд ржкрж╛ржпрж╝ржЦрж╛ржирж╛)/i, message: "ржЕрждрж┐рж░рж┐ржХрзНржд рж░ржХрзНрждржкрж╛ржд/рж░ржХрзНрждржорж┐рж╢рзНрж░рж┐ржд ржкрж╛ржпрж╝ржЦрж╛ржирж╛ тАФ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛ ржирж┐ржиред" },
  { pattern: /(ржЧрж░рзНржнржмрждрзА|ржкрзНрж░рзЗржЧржирзНржпрж╛ржирзНрж╕рж┐|ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛)/i, message: "ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛ржпрж╝ ржУрж╖рзБржз ржирзЗржпрж╝рж╛рж░ ржЖржЧрзЗ ржЕржмрж╢рзНржпржЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред" },
  { pattern: /(рж╢рж┐рж╢рзБ|ржмрж╛ржЪрзНржЪрж╛|ржиржмржЬрж╛рждржХ|рзл ржмржЫрж░рзЗрж░ ржХржо)/i, message: "рзл ржмржЫрж░рзЗрж░ ржХржо рж╢рж┐рж╢рзБрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржУрж╖рзБржз ржирж╛ ржирж┐ржпрж╝рзЗ рж╢рж┐рж╢рзБ-ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржХрж╛ржЫрзЗ ржпрж╛ржиред" },
  { pattern: /(ржЕрждрзНржпржзрж┐ржХ ржЬрзНржмрж░|рззрзжрзи|рззрзжрзй|рззрзжрзк|ржЙржЪрзНржЪ ржЬрзНржмрж░)/i, message: "ржЙржЪрзНржЪ ржЬрзНржмрж░рзЗрж░ рж╕рж╛ржерзЗ ржЦрж┐ржБржЪрзБржирж┐/ржмрж┐ржнрзНрж░рж╛ржирзНрждрж┐ рж╣рж▓рзЗ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛ ржирж┐ржиред" },
  { pattern: /(рждрзАржмрзНрж░ ржбрж┐рж╣рж╛ржЗржбрзНрж░рзЗрж╢ржи|ржорзВрж░рзНржЫрж╛|ржЦрзБржм ржжрзБрж░рзНржмрж▓|ржЪрзЛржЦ ржмрж╕рзЗ ржпрж╛ржУржпрж╝рж╛|ржкрзНрж░рж╕рзНрж░рж╛ржм ржХржо)/i, message: "ржбрж┐рж╣рж╛ржЗржбрзНрж░рзЗрж╢ржирзЗрж░ рж▓ржХрзНрж╖ржг тАФ рж╕рзНржпрж╛рж▓рж╛ржЗржи/ржЪрж┐ржХрж┐рзОрж╕рж╛ ржЬрж░рзБрж░рж┐ред" },
];

// ржЦрзБржм рж╕рж╛ржзрж╛рж░ржг ржХрзАржУржпрж╝рж╛рж░рзНржб-ржЯрзБ-рж╕рж╛ржЬрзЗрж╢ржи рж░рзБрж▓рж╕ (ржбрзЗржорзЛ ржбрж╛ржЯрж╛)
const RULES: Record<string, { tags: string[]; options: string[]; caution?: string }> = {
  "рж╕рж░рзНржжрж┐": {
    tags: ["ржХрж╛рж╢рж┐", "ржирж╛ржХ ржмржирзНржз", "ржЧрж▓рж╛ ржмрзНржпржерж╛"],
    options: ["рждрзБрж▓рж╕рзА-ржЕржжрж╛-рж▓рзЗржмрзБ ржЪрж╛", "рж╕рж┐рждрзЛржкрж▓рж╛ржжрж┐ ржЪрзВрж░рзНржг", "рждрж╛рж▓рж┐рж╕рж╛ржжрж┐ ржЪрзВрж░рзНржг", "рж╕рзНржЯрж┐ржо ржЗржирж╣рзЗрж▓рзЗрж╢ржи (ржирзБржиржЬрж▓)", "ржЧрж┐рж▓ржпрж╝/ржЧрзБржбрзБржЪрж┐ ржХрзНржмрж╛рже"],
  },
  "ржХрж╛рж╢рж┐": {
    tags: ["рж╢рзБрж╖рзНржХ ржХрж╛рж╢рж┐", "ржмрзБржХрзЗ ржХржл"],
    options: ["ржпрж╖рзНржЯрж┐ржоржзрзБ (ржорзБрж▓рзЗржарж┐) ржЧрж▓рж╛ рж╕рзЛрж╣рж╛рждрзЗ", "рж╕рж┐рждрзЛржкрж▓рж╛ржжрж┐ ржЪрзВрж░рзНржг", "ржкрж┐ржкрзНржкрж▓рж┐ ржЪрзВрж░рзНржг", "ржоржзрзБ-рж▓рзЗржмрзБ ржЧрж░ржо ржЬрж▓"],
  },
  "ржЬрзНржмрж░": {
    tags: ["рж╢рзАржд рж╢рзАржд", "рж╢рж░рзАрж░ ржмрзНржпржерж╛"],
    options: ["ржЧрзБржбрзБржЪрж┐/рждрж┐ржирзНрждрж╛рж▓рж┐ ржХрзНржмрж╛рже", "рждрзБрж▓рж╕рзА-ржкрж╛ржирзАржпрж╝", "ржЖржжрж╛-рждрзБрж▓рж╕рзА ржХрзНржмрж╛рже", "ржмрж┐рж╢рзНрж░рж╛ржо ржУ ржЬрж▓ржкрж╛ржи"],
    caution: "ржЙржЪрзНржЪ ржЬрзНржмрж░/рзй ржжрж┐ржи рж╕рзНржерж╛ржпрж╝рзА рж╣рж▓рзЗ ржбрж╛ржХрзНрждрж╛рж░ ржжрзЗржЦрж╛ржиред",
  },
  "ржЕрзНржпрж╛рж╕рж┐ржбрж┐ржЯрж┐": {
    tags: ["ржЧрзНржпрж╛рж╕", "ржЭрж╛рж▓ ржЦрзЗрж▓рзЗ ржмрж╛ржбрж╝рзЗ", "ржмрзБржХ ржЬрзНржмрж╛рж▓рж╛"],
    options: ["ржЕржнрж┐ржкрждрзНрждрж┐ржХрж╛рж░ ржЪрзВрж░рзНржг", "ржзржирж┐ржпрж╝рж╛-ржЬрж┐рж░рж╛-рж╕рзМржл рж╕рж┐ржжрзНржз ржЬрж▓", "ржирж╛рж░ржХрзЗрж▓рзЗрж░ ржЬрж▓", "ржжржзрж┐ржорж╕рзНржд (ржкрж╛рждрж▓рж╛ ржжржЗ)"],
  },
  "ржкрзЗржЯ ржЦрж╛рж░рж╛ржк": {
    tags: ["ржбрж╛ржпрж╝рж░рж┐ржпрж╝рж╛", "ржврж┐рж▓рж╛ ржкрж╛ржпрж╝ржЦрж╛ржирж╛"],
    options: ["ржХрзБржЯржЬрж╛рж░рж┐рж╖рзНржа", "ржмрж┐рж▓рзНржмрж╛ржжрж┐ ржЪрзВрж░рзНржг", "ржнрж╛рждрзЗрж░ ржорж╛ржбрж╝/ORS", "ржжржЗ-ржнрж╛ржд (рж╕рж╣рзНржп рж╣рж▓рзЗ)"],
    caution: "рж░ржХрзНрждржорж┐рж╢рзНрж░рж┐ржд ржкрж╛ржпрж╝ржЦрж╛ржирж╛/ржбрж┐рж╣рж╛ржЗржбрзНрж░рзЗрж╢ржи рж╣рж▓рзЗ ржЬрж░рзБрж░рж┐ рж╕рзЗржмрж╛ред",
  },
  "ржЬржпрж╝рзЗржирзНржЯ ржмрзНржпржерж╛": {
    tags: ["рж╣рж╛ржБржЯрзБ", "ржХрзЛржорж░", "рж╕ржХрж╛рж▓рзЗрж░ ржЬржбрж╝рждрж╛"],
    options: ["рж╢рж╛рж▓рж╛ржХрзНрж╖рж╛/ржмрзЛрж╕ржУржпрж╝рзЗрж▓рж┐ржпрж╝рж╛", "ржЕрж╢рзНржмржЧржирзНржзрж╛", "ржирж┐рж░рзНржЧрзБржгрзНржбрж┐ рждрзЗрж▓ ржорж╛рж▓рж┐рж╢", "рж╣рж╛рж▓ржХрж╛ ржмрзНржпрж╛ржпрж╝рж╛ржо ржУ ржЙрж╖рзНржг рж╕рзЗржБржХ"],
  },
  "рждрзНржмржХрзЗ рж░тАНрзНржпрж╛рж╢": {
    tags: ["ржЪрзБрж▓ржХрж╛ржирж┐", "рж▓рж╛рж▓ржЪрзЗ ржжрж╛ржЧ"],
    options: ["ржирж┐ржо ржкрж╛рждрж╛рж░ рж╕рзНржирж╛ржи", "ржЦрж╛ржжрж┐рж░рж╛рж░рж┐рж╖рзНржа", "рждрзНрж░рж┐ржлрж▓рж╛/ржорж╛ржиржЬрж┐рж╖рзНржарж╛", "рж╢рж░рзАрж░ ржарж╛ржгрзНржбрж╛ рж░рж╛ржЦрж╛"],
    caution: "ржлрзЛрж╕рзНржХрж╛/рж╢рзНржмрж╛рж╕ржХрж╖рзНржЯ/ржорзБржЦ ржлрзБрж▓рзЗ ржЧрзЗрж▓рзЗ ржЕрзНржпрж╛рж▓рж╛рж░рзНржЬрж┐ ржЬрж░рзБрж░рж┐ред",
  },
  "ржШрзБржорзЗрж░ рж╕ржорж╕рзНржпрж╛": {
    tags: ["ржЙржжрзНржмрзЗржЧ", "рж╕рзНржЯрзНрж░рзЗрж╕"],
    options: ["ржмрзНрж░рж╛рж╣рзНржорзА/ржЬржЯрж╛ржорж╛ржирж╕рж┐", "ржЕрж╢рзНржмржЧржирзНржзрж╛", "ржЧрж░ржо ржжрзБржзрзЗ ржЬржпрж╝ржлрж▓", "рж╕рзНржХрзНрж░рж┐ржи-ржлрзНрж░рж┐ рж░рзБржЯрж┐ржи"],
  },
};

const CATEGORY_HINTS = Object.keys(RULES);

function analyze(text: string) {
  const found: { key: string; rule: (typeof RULES)[string] }[] = [];
  const lower = text.toLowerCase();
  for (const key of Object.keys(RULES)) {
    if (lower.includes(key.toLowerCase())) {
      found.push({ key, rule: RULES[key] });
    }
  }
  // If nothing matched, try fuzzy keyword search
  if (found.length === 0) {
    const guesses: { key: string; rule: (typeof RULES)[string]; hits: number }[] = [];
    for (const key of Object.keys(RULES)) {
      let hits = 0;
      for (const t of RULES[key].tags) {
        if (lower.includes(t.toLowerCase())) hits++;
      }
      if (hits > 0) guesses.push({ key, rule: RULES[key], hits });
    }
    guesses.sort((a, b) => b.hits - a.hits);
    if (guesses.length) found.push({ key: guesses[0].key, rule: guesses[0].rule });
  }
  // red flag detection
  const flags = RED_FLAGS.filter((rf) => rf.pattern.test(text));
  return { found, flags };
}

export default function AyurSymptomChecker() {
  const [symptoms, setSymptoms] = useState("");
  const [bodySystem, setBodySystem] = useState<string>("");
  const [history, setHistory] = useState<string[]>([]);

  const { found, flags } = useMemo(() => analyze(symptoms), [symptoms]);

  const addExample = (t: string) => setSymptoms((s) => (s ? s + "\n" + t : t));

  return (
    <div className="min-h-screen bg-gradient-to-b from-rose-50 to-stone-50 p-4 md:p-10">
      <motion.div initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.4 }}>
        <div className="max-w-4xl mx-auto space-y-6">
          <div className="flex items-center justify-between">
            <h1 className="text-2xl md:text-4xl font-bold tracking-tight">ЁЯк╖ ржЖржпрж╝рзБрж░рзНржмрзЗржжрж┐ржХ ржЙржкрж╕рж░рзНржЧ-рж╕рж╛ржЬрзЗрж╢ржи (ржбрзЗржорзЛ)</h1>
            <Badge className="text-xs md:text-sm" variant="secondary">ржбрзЗржорзЛ тАв рждржерзНржпржЧржд</Badge>
          </div>

          <Card className="shadow-lg rounded-2xl">
            <CardHeader className="pb-2">
              <CardTitle className="flex items-center gap-2 text-xl"><Search className="h-5 w-5"/> ржЖржкржирж╛рж░ ржЙржкрж╕рж░рзНржЧ рж▓рж┐ржЦрзБржи</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <Textarea
                placeholder="ржЙржжрж╛рж╣рж░ржг: ржЧржд рзи ржжрж┐ржи ржзрж░рзЗ ржХрж╛рж╢рж┐ ржУ рж╕рж░рзНржжрж┐, рж░рж╛рждрзЗ ржмрзЗржбрж╝рзЗ ржпрж╛ржпрж╝ред"
                value={symptoms}
                onChange={(e) => setSymptoms(e.target.value)}
                className="min-h-[120px]"
              />

              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div>
                  <label className="text-sm text-stone-600">ржмржбрж┐ рж╕рж┐рж╕рзНржЯрзЗржо (ржРржЪрзНржЫрж┐ржХ)</label>
                  <Select onValueChange={setBodySystem} value={bodySystem}>
                    <SelectTrigger>
                      <SelectValue placeholder="ржПржХржЯрж┐ ржмрзЗржЫрзЗ ржирж┐ржи" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="resp">рж╢рзНржмрж╛рж╕рждржирзНрждрзНрж░</SelectItem>
                      <SelectItem value="gi">ржкрж░рж┐ржкрж╛ржХ рждржирзНрждрзНрж░</SelectItem>
                      <SelectItem value="msk">рж╣рж╛ржбрж╝-рж╕ржирзНржзрж┐</SelectItem>
                      <SelectItem value="skin">рждрзНржмржХ</SelectItem>
                      <SelectItem value="neuro">рж╕рзНржирж╛ржпрж╝рзБ/ржШрзБржо</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div className="md:col-span-2 flex flex-wrap gap-2 items-center">
                  <span className="text-sm text-stone-600">ржжрзНрж░рзБржд ржЙржжрж╛рж╣рж░ржг:</span>
                  {[
                    "ржХрж╛рж╢рж┐, ржирж╛ржХ ржмржирзНржз, ржЧрж▓рж╛ ржмрзНржпржерж╛",
                    "ржмрзБржХ ржЬрзНржмрж╛рж▓рж╛, ржЕрзНржпрж╛рж╕рж┐ржбрж┐ржЯрж┐, ржЧрзНржпрж╛рж╕",
                    "ржврж┐рж▓рж╛ ржкрж╛ржпрж╝ржЦрж╛ржирж╛, ржкрзЗржЯ ржмрзНржпржерж╛",
                    "ржЬржпрж╝рзЗржирзНржЯрзЗ ржмрзНржпржерж╛, рж╣рж╛ржБржЯрждрзЗ ржХрж╖рзНржЯ",
                    "рждрзНржмржХрзЗ рж░тАНрзНржпрж╛рж╢ ржУ ржЪрзБрж▓ржХрж╛ржирж┐",
                    "ржЙржжрзНржмрзЗржЧ, рж░рж╛рждрзЗ ржШрзБржо рж╣ржпрж╝ ржирж╛",
                  ].map((ex) => (
                    <Button key={ex} size="sm" variant="outline" onClick={() => addExample(ex)} className="rounded-full">
                      {ex}
                    </Button>
                  ))}
                </div>
              </div>

              {flags.length > 0 && (
                <Card className="border-red-300 bg-red-50">
                  <CardHeader className="pb-1">
                    <CardTitle className="text-red-700 flex items-center gap-2 text-base"><ShieldAlert className="h-5 w-5"/> ржЬрж░рзБрж░рж┐ рж╕рждрж░рзНржХрждрж╛</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-1 text-sm text-red-800">
                    {flags.map((f, i) => (
                      <div key={i}>тАв {f.message}</div>
                    ))}
                    <div>ржПржЗ ржЕржмрж╕рзНржерж╛ржпрж╝ ржирж┐ржЬрзЗ ржерзЗржХрзЗ ржУрж╖рзБржз ржирж╛ ржирж┐ржпрж╝рзЗ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓рзЗ ржпрж╛ржиред</div>
                  </CardContent>
                </Card>
              )}

              <div className="space-y-3">
                <h3 className="font-semibold flex items-center gap-2"><Stethoscope className="h-4 w-4"/> рж╕ржорзНржнрж╛ржмрзНржп ржХрзНржпрж╛ржЯрзЗржЧрж░рж┐</h3>
                <div className="flex flex-wrap gap-2">
                  {CATEGORY_HINTS.map((c) => (
                    <Badge key={c} variant={found.some(f => f.key === c) ? "default" : "secondary"}>{c}</Badge>
                  ))}
                </div>

                <h3 className="font-semibold flex items-center gap-2 mt-4"><Activity className="h-4 w-4"/> рж╕рж╛ржЬрзЗрж╕рзНржЯрзЗржб ржЖржпрж╝рзБрж░рзНржмрзЗржжрж┐ржХ ржЕржкрж╢ржи (ржбрзЛржЬ ржиржпрж╝)</h3>
                {found.length === 0 ? (
                  <div className="text-sm text-stone-600 flex items-center gap-2"><CircleHelp className="h-4 w-4"/> ржорж┐рж▓ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред рж╕рзНржкрж╖рзНржЯ ржХрж░рзЗ ржЙржкрж╕рж░рзНржЧ рж▓рж┐ржЦрзБржи ржмрж╛ ржЙржкрж░ ржерзЗржХрзЗ ржПржХржЯрж┐ ржЙржжрж╛рж╣рж░ржг ржмрзЗржЫрзЗ ржирж┐ржиред</div>
                ) : (
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                    {found.map(({ key, rule }) => (
                      <Card key={key} className="rounded-xl">
                        <CardHeader className="pb-2">
                          <CardTitle className="text-base">{key}</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-2 text-sm">
                          <div className="flex flex-wrap gap-1">{rule.tags.map((t) => (<Badge key={t} variant="outline">{t}</Badge>))}</div>
                          <ul className="list-disc ml-5">
                            {rule.options.map((opt) => (<li key={opt}>{opt}</li>))}
                          </ul>
                          {rule.caution && <div className="text-amber-700 text-xs">рж╕рждрж░рзНржХрждрж╛: {rule.caution}</div>}
                          <div className="text-xs text-stone-500">ржирзЛржЯ: ржПржЧрзБрж▓рж┐ рж╕рж╛ржзрж╛рж░ржгржд ржЖрж▓рзЛржЪрж┐ржд ржЖржпрж╝рзБрж░рзНржмрзЗржжрж┐ржХ ржмрж┐ржХрж▓рзНржкред ржбрзЛржЬ/ржкрзНрж░ржпрж╝рзЛржЧрзЗрж░ ржЖржЧрзЗ BAMS ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ ржкрж░рж╛ржорж░рзНрж╢ ржирж┐ржиред</div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                )}
              </div>

              <div className="flex items-center justify-between pt-2">
                <Button onClick={() => setHistory((h) => [symptoms, ...h].slice(0, 10))} disabled={!symptoms}>
                  ржлрж▓рж╛ржлрж▓ рж╕рзЗржн ржХрж░рзБржи
                </Button>
                <Button variant="ghost" onClick={() => { setSymptoms(""); setBodySystem(""); }}>рж░рж┐рж╕рзЗржЯ</Button>
              </div>
            </CardContent>
          </Card>

          {history.length > 0 && (
            <Card className="rounded-2xl">
              <CardHeader className="pb-2">
                <CardTitle className="text-lg flex items-center gap-2"><AlertTriangle className="h-5 w-5"/> рж╕рж╛ржорзНржкрзНрж░рждрж┐ржХ рж╕рж╛рж░рзНржЪ</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {history.map((h, i) => (
                  <div key={i} className="text-sm text-stone-700 border-b last:border-none py-2">{h}</div>
                ))}
              </CardContent>
            </Card>
          )}

          <Card className="border-amber-300 bg-amber-50 rounded-2xl">
            <CardContent className="text-sm text-amber-900 p-4">
              тЪая╕П <span className="font-semibold">ржбрж┐рж╕ржХрзНрж▓рзЗржЗржорж╛рж░:</span> ржПржЗ ржЯрзБрж▓ржЯрж┐ рж╕рзНржмрж╛рж╕рзНржерзНржп-рж╢рж┐ржХрзНрж╖рж╛ ржЙржжрзНржжрзЗрж╢рзНржпрзЗред ржПржЯрж┐ ржХрзЛржиржУ ржЪрж┐ржХрж┐рзОрж╕рж╛ ржкрж░рж╛ржорж░рзНрж╢ ржмрж╛ рж░рзЛржЧ ржирж┐рж░рзНржгржпрж╝ ржиржпрж╝ред ржЬрж░рзБрж░рж┐ ржЕржмрж╕рзНржерж╛ржпрж╝ 112/108 ржП ржлрзЛржи ржХрж░рзБржи ржПржмржВ ржирж┐ржХржЯрж╕рзНрже рж╣рж╛рж╕ржкрж╛рждрж╛рж▓/ржЪрж┐ржХрж┐рзОрж╕ржХрзЗрж░ рж╕рж╛ржерзЗ ржпрзЛржЧрж╛ржпрзЛржЧ ржХрж░рзБржиред
            </CardContent>
          </Card>
        </div>
      </motion.div>
    </div>
  );
}
                
